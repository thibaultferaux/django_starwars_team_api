from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator
from pgvector.django import VectorField

from core.models import SoftDeleteModel


class Character(SoftDeleteModel):
    name = models.CharField(max_length=200, unique=True, db_index=True)
    height = models.FloatField(null=True, blank=True)
    mass = models.FloatField(null=True, blank=True)
    gender = models.CharField(max_length=50, null=True, blank=True)
    homeworld = models.CharField(max_length=100, null=True, blank=True)
    species = models.CharField(max_length=100, null=True, blank=True)
    image_url = models.URLField(null=True, blank=True)

    # Affiliations (stored as JSON)
    affiliations_data = models.JSONField(default=list)

    # AI Generated Fields
    biography = models.TextField(null=True, blank=True, help_text="AI-generated biography of the character.")
    is_evil = models.BooleanField(default=False, help_text="Classification by AI if the character is evil.", db_index=True)
    evilness_score = models.IntegerField(
        null=True,
        blank=True,
        validators=[MinValueValidator(0), MaxValueValidator(100)],
        help_text="Evilness score from 0 to 100 generated by AI, where 0 is good and 100 is evil.",
        db_index=True,
    )
    evilness_explanation = models.TextField(null=True, blank=True, help_text="Explanation of the evilness score by AI.")

    # For semantic search
    description_embedding = VectorField(
        dimensions=1536, # Default length of "text-embedding-3-small" embeddings
        null=True,
        blank=True,
        help_text="Vector embedding for semantic search.",
    )


    # Metadata
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['name']

    def __str__(self):
        return self.name

    @property
    def affiliations(self):
        """Return a list of affiliations."""
        return self.affiliations_data if self.affiliations_data else []

    def get_description_for_embeddings(self):
        """Generate description text for semantic search embedding"""
        parts = [self.name]

        if self.species:
            parts.append(f"Species: {self.species}")

        if self.homeworld:
            parts.append(f"Homeworld: {self.homeworld}")

        if self.affiliations:
            parts.append(f"Affiliations: {', '.join(self.affiliations)}")

        if self.biography:
            parts.append(f"Biography: {self.biography}")

        return ". ".join(parts)


class Master(SoftDeleteModel):
    """Model to store master-apprentice relationships."""
    character = models.ForeignKey(
        Character,
        related_name='masters',
        on_delete=models.CASCADE,
    )
    master_name = models.CharField(max_length=255)

    class Meta:
        unique_together = ('character', 'master_name')

    def __str__(self):
        return f"{self.character.name} - Master: {self.master_name}"


